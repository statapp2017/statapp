############################
#                          #
#    Sentiment Analysis    #
#                          #
############################

rm(list = ls())
library(ggplot2)
library(tm)
library(stringr)
library(data.table)
library(sentimentr)

setwd("/Users/okabeshu/Documents/ENSAE/StatApp")
# Importation des données
verbatim <- read.csv2("verbatims.csv", encoding = "latin1")

# Documents for Sentiment Analysis
hash_valence <- read.csv("hash_valence_fr.csv", encoding = "utf8") # DataFrame of valence shifters
hash_sentiment <- read.csv("hash_tout_fr.csv", encoding = "utf8")
hash_sentiment <- hash_sentiment[!hash_sentiment$x %in% hash_valence$x, ]
epargne <- subset(verbatim, REPRISE_ACTIVITE == "Epargne")
ex <- epargne[1:20, ]

# Converting into data.tables
setDT(hash_sentiment)
setkey(hash_sentiment)
setDT(hash_valence)
setkey(hash_valence)

warnings()

### Analyse du sentiment ###
sentiment_message <- function(message_brut) {
  message <- gsub(" \n", ". ", message_brut)
  sent <- sentiment(message, polarity_dt = hash_sentiment, valence_shifters_dt = hash_valence, 
                    n.before = 5, n.after = 2)
  # Return a vector of sentiment scores
  vec_sent <- unlist(sent[, 4])
  vec_sent
}

# Example with a message from a forum
sentiment_message("Je suis assurer chez eux depuis 5 ans et tout ce passe très bien. Les conseillers sont à l'écoute, et lors d'un sinistre il y a eu une bonne réactivité, on m'as proposé des solutions.  Je vous conseille cette assureur.")

# Add a sentiment column in the DataFrame
sentimenter <- function(data, colonne) {
  t <- which(colnames(data) == colonne)
  data$sentiment <- apply(data, 1, function(x) sentiment_message(x[t]))
  data
}

# Example with a subset
#essai <- sentimenter(ex, "raisons_recommandation")

# Add the predicted score for the message
predict_sent <- function(data, colonne) {
  t <- which(colnames(data) == colonne)
  data$moy <- apply(data, 1, function(x) (as.numeric(mean(unlist(x[t]))))) # The vector is saved as a list
  min_val <- min(data$moy) 
  max_coef <- as.numeric(10 / (max(data$moy) - (min(-1, min_val))))
  u <- which(colnames(data) == "moy")
  data$pred <- apply(data, 1, function(x) ((as.numeric(x[u]) - min(-1, min_val)) * min(5, max_coef))) # The result should be between 0 and 10
  data
}

# Example with a subset
#essai1 <- predict_sent(essai, "sentiment")
#summary(essai1)

epargne_pred <- predict_sent(sentimenter(epargne, "raisons_recommandation"), "sentiment")

### Difference between the actual and the predicted value ###
epargne_pred$diff <- abs(epargne_pred$recommandation_SGK - epargne_pred$pred)
difference <- sqrt(sum(epargne_pred$diff))

### Logistic Regression ###
#train <- epargne[1:2000, ]
#test <- epargne[2001:2572, ]

# Comparison of scores
scatter.smooth(epargne_pred$recommandation_SGK, epargne_pred$pred, main = "Comparaison des notes", 
               xlab = "Note réelle", ylab = "Note prédite", pch = 20, col = 4)

plot(epargne_pred$recommandation_SGK, epargne_pred$diff, main = "Comparaison des notes", 
     xlab = "Note réelle", ylab = "Différence dans les prédictions", pch = 20, col = 4)

#model <- glm(recommandation_SGK ~., family = binomial(link = "logit"), data = train)

prediction <- epargne_pred[c("recommandation_SGK", "pred", "diff", "raisons_recommandation")]

### Create 3 categories ###
# Show the quantiles
#quantile_reel = quantile(prediction$recommandation_SGK, c(1 / 3, 2 / 3))
# 5 9
#quantile_predit = quantile(prediction$pred, c(1 / 3, 2 / 3))
# 5.000000 5.781929 

attach(prediction)
# Actual category
prediction$actual_cat[recommandation_SGK >= 7] <- "Satisfait"
prediction$actual_cat[recommandation_SGK >= 4 & recommandation_SGK < 7] <- "Neutre"
prediction$actual_cat[recommandation_SGK < 4] <- "Inatisfait"

# Predicted category
prediction$pred_cat[pred > 7] <- "Satisfait"
prediction$pred_cat[pred >= 4 & pred <= 7 ] <- "Neutre"
prediction$pred_cat[pred < 4] <- "Insatisfait"
detach(prediction)

# View the number of messages by category
barplot(table(prediction$actual_cat))
# Display results as a bar chart
ggplot(prediction, aes(pred_cat, ..count..)) + geom_bar(aes(fill = actual_cat), position = "dodge")

write.csv(prediction, "prediction.csv", row.names = FALSE)

### Profiler ###
Rprof("/Users/okabeshu/Documents/ENSAE/StatApp/Profile.txt")
predict_sent(sentimenter(epargne, "raisons_recommandation"), "sentiment")
Rprof(NULL)
summaryRprof("/Users/okabeshu/Documents/ENSAE/StatApp/Profile.txt")


